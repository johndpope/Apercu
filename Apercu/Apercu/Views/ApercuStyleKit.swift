//
//  ApercuStyleKit.swift
//  Apercu
//
//  Created by David Lantrip on 1/9/16.
//  Copyright (c) 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class ApercuStyleKit : NSObject {

    //// Drawing Methods

    public class func drawCanvas1(frame frame: CGRect = CGRectMake(0, 90, 320, 47), twoMinuteWidth: CGFloat = 25, oneMinuteWidth: CGFloat = 25, fillWidth: CGFloat = 123) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.440, green: 0.440, blue: 0.440, alpha: 1.000)
        let color2 = UIColor(red: 0.000, green: 0.401, blue: 0.526, alpha: 1.000)
        var color2HueComponent: CGFloat = 1,
            color2SaturationComponent: CGFloat = 1,
            color2BrightnessComponent: CGFloat = 1
        color2.getHue(&color2HueComponent, saturation: &color2SaturationComponent, brightness: &color2BrightnessComponent, alpha: nil)

        let color3 = UIColor(hue: color2HueComponent, saturation: color2SaturationComponent, brightness: 0.8, alpha: CGColorGetAlpha(color2.CGColor))

        //// Gradient Declarations
        let gradient2 = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [color2.CGColor, color3.CGColor], [0, 1])!

        //// Group
        //// Fill Rectangle Drawing
        let fillRectangleRect = CGRectMake(5, 5, fillWidth, 15)
        let fillRectanglePath = UIBezierPath(rect: fillRectangleRect)
        CGContextSaveGState(context)
        fillRectanglePath.addClip()
        CGContextDrawLinearGradient(context, gradient2,
            CGPointMake(fillRectangleRect.minX, fillRectangleRect.midY),
            CGPointMake(fillRectangleRect.maxX, fillRectangleRect.midY),
            CGGradientDrawingOptions())
        CGContextRestoreGState(context)


        //// White Background Drawing
        let whiteBackgroundPath = UIBezierPath()
        whiteBackgroundPath.moveToPoint(CGPointMake(frame.minX + 307.36, frame.minY + 5))
        whiteBackgroundPath.addLineToPoint(CGPointMake(frame.minX + 16.32, frame.minY + 5))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 14.84, frame.minY + 5), controlPoint1: CGPointMake(frame.minX + 15.79, frame.minY + 5), controlPoint2: CGPointMake(frame.minX + 15.3, frame.minY + 5))
        whiteBackgroundPath.addLineToPoint(CGPointMake(frame.minX + 9.6, frame.minY + 5.56))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 5, frame.minY + 12.12), controlPoint1: CGPointMake(frame.minX + 6.84, frame.minY + 6.57), controlPoint2: CGPointMake(frame.minX + 5, frame.minY + 9.19))
        whiteBackgroundPath.addLineToPoint(CGPointMake(frame.minX + 5, frame.minY + 12.5))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 5, frame.minY + 12.87), controlPoint1: CGPointMake(frame.minX + 5, frame.minY + 12.5), controlPoint2: CGPointMake(frame.minX + 5, frame.minY + 12.5))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 9.6, frame.minY + 19.44), controlPoint1: CGPointMake(frame.minX + 5, frame.minY + 15.81), controlPoint2: CGPointMake(frame.minX + 6.84, frame.minY + 18.43))
        whiteBackgroundPath.addLineToPoint(CGPointMake(frame.minX + 9.88, frame.minY + 19.51))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 12.64, frame.minY + 20), controlPoint1: CGPointMake(frame.minX + 11.37, frame.minY + 20), controlPoint2: CGPointMake(frame.minX + 13.02, frame.minY + 20))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 12.69, frame.minY + 20), controlPoint1: CGPointMake(frame.minX + 12.69, frame.minY + 20), controlPoint2: CGPointMake(frame.minX + 12.69, frame.minY + 20))
        whiteBackgroundPath.addLineToPoint(CGPointMake(frame.minX + 303.68, frame.minY + 20))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 310.4, frame.minY + 19.44), controlPoint1: CGPointMake(frame.minX + 306.98, frame.minY + 20), controlPoint2: CGPointMake(frame.minX + 308.63, frame.minY + 20))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 315, frame.minY + 12.87), controlPoint1: CGPointMake(frame.minX + 313.16, frame.minY + 18.43), controlPoint2: CGPointMake(frame.minX + 315, frame.minY + 15.81))
        whiteBackgroundPath.addLineToPoint(CGPointMake(frame.minX + 315, frame.minY + 12.5))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 315, frame.minY + 12.13), controlPoint1: CGPointMake(frame.minX + 315, frame.minY + 12.5), controlPoint2: CGPointMake(frame.minX + 315, frame.minY + 12.5))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 310.4, frame.minY + 5.56), controlPoint1: CGPointMake(frame.minX + 315, frame.minY + 9.19), controlPoint2: CGPointMake(frame.minX + 313.16, frame.minY + 6.57))
        whiteBackgroundPath.addLineToPoint(CGPointMake(frame.minX + 310.12, frame.minY + 5.49))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 307.36, frame.minY + 5), controlPoint1: CGPointMake(frame.minX + 308.63, frame.minY + 5), controlPoint2: CGPointMake(frame.minX + 306.98, frame.minY + 5))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 307.31, frame.minY + 5), controlPoint1: CGPointMake(frame.minX + 307.31, frame.minY + 5), controlPoint2: CGPointMake(frame.minX + 307.31, frame.minY + 5))
        whiteBackgroundPath.addLineToPoint(CGPointMake(frame.minX + 307.36, frame.minY + 5))
        whiteBackgroundPath.closePath()
        whiteBackgroundPath.moveToPoint(CGPointMake(frame.minX + 320, frame.minY + 0))
        whiteBackgroundPath.addCurveToPoint(CGPointMake(frame.minX + 320, frame.minY + 27), controlPoint1: CGPointMake(frame.minX + 320, frame.minY), controlPoint2: CGPointMake(frame.minX + 320, frame.minY + 27))
        whiteBackgroundPath.addLineToPoint(CGPointMake(frame.minX, frame.minY + 27))
        whiteBackgroundPath.addLineToPoint(CGPointMake(frame.minX, frame.minY))
        whiteBackgroundPath.addLineToPoint(CGPointMake(frame.minX + 320, frame.minY))
        whiteBackgroundPath.addLineToPoint(CGPointMake(frame.minX + 320, frame.minY + 0))
        whiteBackgroundPath.closePath()
        UIColor.whiteColor().setFill()
        whiteBackgroundPath.fill()


        //// Main Rectangle 2 Drawing
        let mainRectangle2Path = UIBezierPath(roundedRect: CGRectMake(frame.minX + 5, frame.minY + 5, 310, 15), cornerRadius: 5)
        UIColor.grayColor().setStroke()
        mainRectangle2Path.lineWidth = 2
        mainRectangle2Path.stroke()




        //// Text Drawing
        let textRect = CGRectMake(frame.minX + 5, frame.minY + 27, 25, 17)
        let textTextContent = NSString(string: "\\u2205")
        let textStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(15), NSForegroundColorAttributeName: color, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        textTextContent.drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)


        //// Text 2 Drawing
        let text2Rect = CGRectMake(71.25, 27, oneMinuteWidth, 17)
        let text2TextContent = NSString(string: "1m")
        let text2Style = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        text2Style.alignment = .Left

        let text2FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(15), NSForegroundColorAttributeName: color, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRectWithSize(CGSizeMake(text2Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text2Rect);
        text2TextContent.drawInRect(CGRectMake(text2Rect.minX, text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, text2Rect.width, text2TextHeight), withAttributes: text2FontAttributes)
        CGContextRestoreGState(context)


        //// Text 3 Drawing
        let text3Rect = CGRectMake(142.5, 27, twoMinuteWidth, 17)
        let text3TextContent = NSString(string: "2m")
        let text3Style = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        text3Style.alignment = .Center

        let text3FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(15), NSForegroundColorAttributeName: color, NSParagraphStyleAttributeName: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRectWithSize(CGSizeMake(text3Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text3Rect);
        text3TextContent.drawInRect(CGRectMake(text3Rect.minX, text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, text3Rect.width, text3TextHeight), withAttributes: text3FontAttributes)
        CGContextRestoreGState(context)


        //// Text 4 Drawing
        let text4Rect = CGRectMake(frame.minX + floor((frame.width - 25) * 0.72458 - 0.25) + 0.75, frame.minY + 27, 25, 17)
        let text4TextContent = NSString(string: "5m")
        let text4Style = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        text4Style.alignment = .Center

        let text4FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(15), NSForegroundColorAttributeName: color, NSParagraphStyleAttributeName: text4Style]

        let text4TextHeight: CGFloat = text4TextContent.boundingRectWithSize(CGSizeMake(text4Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text4Rect);
        text4TextContent.drawInRect(CGRectMake(text4Rect.minX, text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, text4Rect.width, text4TextHeight), withAttributes: text4FontAttributes)
        CGContextRestoreGState(context)


        //// Text 5 Drawing
        let text5Rect = CGRectMake(frame.minX + frame.width - 35, frame.minY + 27, 30, 17)
        let text5TextContent = NSString(string: "10m")
        let text5Style = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        text5Style.alignment = .Right

        let text5FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(15), NSForegroundColorAttributeName: color, NSParagraphStyleAttributeName: text5Style]

        let text5TextHeight: CGFloat = text5TextContent.boundingRectWithSize(CGSizeMake(text5Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text5Rect);
        text5TextContent.drawInRect(CGRectMake(text5Rect.minX, text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, text5Rect.width, text5TextHeight), withAttributes: text5FontAttributes)
        CGContextRestoreGState(context)
    }

}
